<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
type = ""
p_id = 0

focus = "none"

bees = 0 // How many bees in the stack, How much pollen/nectar you can gather is based on this amount
escort = 0 
move_speed = 0

gathered_pollen = 0
gathered_nectar = 0
gathered_honey = 0 // The multiplier
gathered_total = 0


home_x = 0 //Where they spawn, and where they will return
home_y = 0

go_x = 0  //Where they want to go
go_y = 0 

state = "go"       //What they are currently doing: go, return, gather/patrol/attack, combat
order_state = "go" //What they want to do when able: go, return, gather/patrol/attack

space = "none" //Space they take nectar or pollen from, or attack
target = "none" //Target patroller chases

a_frame = 0

//Combat Variables
hp = 30
damage = 0 //Damage taken
attack = 0
attack_bonus = 0
enemy_bee = ""

alarm[0] = 1
bee_fx = 0

patrol_range = 0 // Range given by upgrades
patrol_stump = 0 // Bonus patrol range given by stump
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = "dead"
obj_phasetracker.alarm[2] = 2*60

obj_admin.workers_roaming = false

with obj_bee {
    if type == "gatherer" {obj_admin.workers_roaming = true}
}

with obj_bee_fx {
    if maker == other.id {instance_destroy()}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create bee fx

for (i = 0; i &lt; bees+escort; i++) {
    with instance_create(x,y,obj_bee_fx) {
        maker = other.id
    }
    bee_fx++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return from gathering

/*
    Putting the return code here should make sure the creation order of bees don't matter, in order to not mess with potential randomness and desyncing between players.
*/

if gathered_total &gt; bees {gathered_total = bees}

if (state == "gather") {
    if (gathered_total &gt;= bees || space.resources &lt;= 0) {
        state = "return"
        order_state = "return"
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Patrol hunt bees

if type == "patrol" &amp;&amp; state != "combat" {
    target = -1
    target_distance = 48+(patrol_range*16)+patrol_stump
    with obj_bee {
        if p_id != other.p_id &amp;&amp; point_distance(x,y,other.x,other.y) &lt; other.target_distance {
            other.target = id
            other.target_distance = point_distance(x,y,other.x,other.y)
        }
    }
    if target != -1 {state = "chase"}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat Stats

var base_attack = 1 + attack_bonus //attack_bonus = upgrades in attack 

var stack_bonus = ((bees+escort)*base_attack) / 2

//Add an extra attack if not a gatherer
if (escort &gt; 0 || type != "gatherer") {stack_bonus++}

attack = base_attack + stack_bonus

//Exit combat
if (state == "combat" &amp;&amp; !instance_position(x,y,obj_combat) &amp;&amp; !instance_position(x,y,obj_hive_combat)) {
    state = order_state
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

//When they reach their objective
if (x == go_x &amp;&amp; y == go_y &amp;&amp; state == "go") {
    if (type == "gatherer") {
        space = instance_position(x,y,obj_space)
        state = "gather"
        order_state = "gather"
        ds_list_add(space.collided_with,id)
    }
    
    if (type == "patrol") {
        state = "patrol"
        order_state = "patrol"
        space = instance_position(x,y,obj_space)
        if space.type == "stump" {patrol_stump += 64}
        if space.type == "rock" {patrol_stump += 32}
    }

    if (type == "attack") {
        space = instance_position(x,y,obj_hive)
        state = "attack"
        order_state = "return"
    }
}

//When they return to Hive
if (x == home_x &amp;&amp; y == home_y &amp;&amp; state == "return") {
    with instance_nearest(x,y,obj_hive) {
        workers += other.bees+other.escort
    }
    // Offload resources
    if p_id == obj_admin.player {
        obj_admin.res_pollen += gathered_pollen*gathered_total
        obj_admin.res_nectar += gathered_nectar*gathered_total
        obj_admin.res_honey += gathered_honey*gathered_total
    }
    // Offload resources - bots
    if p_id == 101 {
        obj_bot1.pollen += gathered_pollen*gathered_total
        obj_bot1.nectar += gathered_nectar*gathered_total
        obj_bot1.honey += gathered_honey*gathered_total
    }
    if p_id == 102 {
        obj_bot2.pollen += gathered_pollen*gathered_total
        obj_bot2.nectar += gathered_nectar*gathered_total
        obj_bot2.honey += gathered_honey*gathered_total
    }
    if p_id == 103 {
        obj_bot3.pollen += gathered_pollen*gathered_total
        obj_bot3.nectar += gathered_nectar*gathered_total
        obj_bot3.honey += gathered_honey*gathered_total
    }
    if p_id == 104 {
        obj_bot4.pollen += gathered_pollen*gathered_total
        obj_bot4.nectar += gathered_nectar*gathered_total
        obj_bot4.honey += gathered_honey*gathered_total
    }
    if p_id == 105 {
        obj_bot5.pollen += gathered_pollen*gathered_total
        obj_bot5.nectar += gathered_nectar*gathered_total
        obj_bot5.honey += gathered_honey*gathered_total
    }
    if p_id == 106 {
        obj_bot6.pollen += gathered_pollen*gathered_total
        obj_bot6.nectar += gathered_nectar*gathered_total
        obj_bot6.honey += gathered_honey*gathered_total
    }
    //die
    instance_destroy()
}

// Patrol chase bees

if (state == "chase") {
    if point_distance(x,y,target.x,target.y) &lt;= move_speed {
        x = target.x
        y = target.y
    } else {
        dir = point_direction(x,y,target.x,target.y)
        x += lengthdir_x(move_speed,dir)
        y += lengthdir_y(move_speed,dir)
    }
}

//Go towards objective
if (state == "go") {
    //Code to move towards go_x and go_y
    if point_distance(x,y,go_x,go_y) &lt;= move_speed {
        x = go_x
        y = go_y 
    } else {
        dir = point_direction(x,y,go_x,go_y)
        x += lengthdir_x(move_speed,dir)
        y += lengthdir_y(move_speed,dir)
    }
}

if (state == "return") {
    patrol_stump = 0
    //Code to move towards home_x and home_y
    if point_distance(x,y,home_x,home_y) &lt;= move_speed {
        x = home_x
        y = home_y 
    } else {
        dir = point_direction(x,y,home_x,home_y)
        x += lengthdir_x(move_speed,dir)
        y += lengthdir_y(move_speed,dir)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do objective

if (state == "gather") {
    //Code to take pollen and nectar from space
    space.resources -= 0.025
    if focus == "none" || focus == "bloom" {
        gathered_pollen = space.pollen
        gathered_nectar = space.nectar
        gathered_honey = space.honey
    }
    if focus == "pollen" {
        gathered_pollen = space.pollen+(space.nectar/2)+(space.honey/2)
        gathered_nectar = space.nectar/2
        gathered_honey = space.honey/2
    }
    if focus == "nectar" {
        gathered_pollen = space.pollen/2
        gathered_nectar = space.nectar+(space.pollen/2)+(space.honey/2)
        gathered_honey = space.honey/2
    }
    if focus == "honey" {
        gathered_pollen = space.pollen/2
        gathered_nectar = space.nectar/2
        gathered_honey = space.honey+(space.pollen/2)+(space.nectar/2)
    }
    gathered_total += 0.025
}

// Patrols return

if (state == "patrol" &amp;&amp; obj_admin.workers_roaming == false) {
    state = "return"
    order_state = "return"
}

// Remove excess collections
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Forced into combat
if (instance_position(x,y,obj_combat) &amp;&amp; state != "combat") {
    state = "combat"
    patrol_stump = 0
    with instance_nearest(x,y,obj_combat) {
        units[units_total] = other.id
        units_total++
    }    
}

if (instance_position(x,y,obj_hive_combat) &amp;&amp; state != "combat") {
    state = "combat"
    patrol_stump = 0
    with instance_nearest(x,y,obj_hive_combat) {
        units[units_total] = other.id
        units_total++
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_combat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ENTER ONGOING COMBAT
/*if (state != "combat" &amp;&amp; other.state != "end" &amp;&amp; type == "patrol") {
state = "combat"

with other {
units[units_total] = other.id
units_total++}

}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bee">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start new combat
if (p_id &lt; other.p_id) { //DEBUG ONLY, Should be &lt; or &gt; instead of == 
    //Only start combat if someone is a patol, AND none of them is in combat already
    if ((type == "patrol" || other.type == "patrol") &amp;&amp; state != "combat" &amp;&amp; other.state != "combat") {
        state = "combat"
        other.state = "combat"
        //other.p_id = 2 //DEBUG ONLY
        enemy_bee = other.id
        
        with instance_create(x,y,obj_combat)  {
            units_total = 2
            units[0] = other.id
            units[1] = other.enemy_bee 
            state = "attack"
        }
        
        enemy_bee = "none"
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_hive">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///START HIVE COMBAT
if (state == "attack" &amp;&amp; other.hp &gt; 1) {
    state = "combat"
    other.state = "combat"
    
    with instance_create(x,y,obj_hive_combat) {
        units_total = 3
        units[0] = instance_nearest(x,y,obj_hive)
        with instance_create(x,y,obj_queen_fx) {
        maker = other.units[0]
        }
        units[2] = other.id
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Replace bee fx

if bee_fx &lt; bees+escort {
    with instance_create(x,y,obj_bee_fx) {
        maker = other.id
    }
    bee_fx++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//draw_self()
//draw_text(x,y+16,state)
//draw_text(x,y+32,order_state)
//draw_text(x,y-16,type)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Patrol range

if type == "patrol" &amp;&amp; state != "combat" &amp;&amp; p_id == obj_admin.player {
    draw_set_colour(c_black)
    draw_set_alpha(0.2)
    draw_circle(x,y,(patrol_range*16+patrol_stump)+48,true)
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
