<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INFO
/*
    AI player.
    This object exists for all players, with a seed set by the terrain generator.
    On its turn, it makes all its desicions, then randomises a new seed.
        (but not via randomize())
    Because the seed is the same for all players, the bot's decisions should be as well.
*/

seed = 0

// Tendenices increase the chance the AI will pick a specific action
tendency_healqueen = 0 // Focus on restoring the queen's health
tendency_caution = 0 // Make extra drones, send patrols
tendency_attack = 0 // Target other player's hives
tendency_units = 0 // Scale from 0-10. If units should spread out or group up
tendency_guard = 0 // Keeping some extra drones/workers in the hive
tendency_work = 0 // Buying and sending out workers
tendency_research = 0 // Likelihood of buying upgrades

tendency_pollen = 0
tendency_nectar = 0
tendency_honey = 0

hive = 0 // The id of its hive

pollen = 20
nectar = 20
honey = 20

focus = "none"

upgrade_speed_cost = 5
upgrade_distance_cost = 3
upgrade_queen_cost = 6
upgrade_attack_cost = 10
upgrade_patrol_cost = 5
upgrade_pollenfocus_cost = 15
upgrade_nectarfocus_cost = 15
upgrade_honeyfocus_cost = 15
upgrade_pollinationfocus_cost = 15
upgrade_actheal_cost = 15
upgrade_actroyal_cost = 15
upgrade_actattack_cost = 15
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emergency purchases

if hive.workers == 0 &amp;&amp; nectar &gt;= 2 {
    nectar -= 2
    hive.workers++
    hive.idle_workers++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide what to do for the turn

random_set_seed(seed)

// Research first

// Add all spaces to list

list_flowers = ds_list_create()
list_obstacles = ds_list_create() // Rocks and stumps

ds_list_shuffle(list_flowers)
ds_list_shuffle(list_obstacles)

with obj_space {
    if type == "flower" &amp;&amp; point_distance(x,y,obj_bot1.hive.x,obj_bot1.hive.y) &lt;= obj_bot1.hive.reach {
        with instance_create(x,y,obj_aiorder) {
            owner = 101
            space_owner = other.id
            ds_list_add(obj_bot1.list_flowers,id)
        }
    }
    if (type == "rock" || type == "stump") &amp;&amp; point_distance(x,y,obj_bot1.hive.x,obj_bot1.hive.y) &lt;= obj_bot1.hive.reach {
        with instance_create(x,y,obj_aiorder) {
            owner = 101
            space_owner = other.id
            ds_list_add(obj_bot1.list_obstacles,id)
        }
    }
}

// Do all other actions

list_decision = ds_list_create()

var temp = tendency_healqueen+irandom(4)
repeat(temp) {ds_list_add(list_decision,"queen")}

temp = tendency_caution+irandom(4)
repeat(temp) {ds_list_add(list_decision,"caution")}

temp = tendency_guard+irandom(4)
repeat(temp) {ds_list_add(list_decision,"guard")}

temp = tendency_work+irandom(4)
repeat(temp) {ds_list_add(list_decision,"work")}

//temp = tendency_research+irandom(4)
//repeat(temp) {ds_list_add(list_decision,"research")}

temp = (10-tendency_caution)+irandom(4)
repeat(temp) {ds_list_add(list_decision,"worker")}

ds_list_shuffle(list_decision)

while ds_list_size(list_decision) &gt; 0 {
    temp = ds_list_find_value(list_decision,0)
    show_debug_message(ds_list_find_value(list_decision,0))
    if temp == "queen" {scr_ai_queen()}
    if temp == "caution" {scr_ai_caution()}
    if temp == "guard" {scr_ai_guard()}
    if temp == "work" {scr_ai_work()}
    //if temp == "research" {scr_ai_research()}
    if temp == "worker" {scr_ai_makeworker()}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Buy upgrades
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use actions / Decide focus
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Buy units


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assign units

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Be done

ds_list_destroy(list_decision)
ds_list_destroy(list_flowers)
ds_list_destroy(list_obstales)

seed = irandom(9999999999)

obj_phasetracker.bots_ready++
obj_phasetracker.alarm[0] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin game

seed = irandom(9999999999)

tendency_healqueen = irandom_range(1,10) // Focus on restoring the queen's health
tendency_caution = irandom_range(1,10) // Make extra drones, send patrols
tendency_attack = irandom_range(1,10) // Target other player's hives
tendency_units = irandom_range(1,10) // Scale from 0-10. If units should spread out or group up
tendency_guard = irandom_range(1,10) // Keeping some extra drones/workers in the hive
tendency_work = irandom_range(1,10) // Buying and sending out workers
tendency_research = irandom_range(1,10) // Likelihood of buying upgrades

tendency_pollen = irandom_range(1,10)
tendency_nectar = irandom_range(1,10)
tendency_honey = irandom_range(1,10)


with obj_hive {
    if p_id = 101 {other.hive = id}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
