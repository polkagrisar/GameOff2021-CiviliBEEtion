<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INFO
/*
    AI player.
    This object exists for all players, with a seed set by the terrain generator.
    On its turn, it makes all its desicions, then randomises a new seed.
        (but not via randomize())
    Because the seed is the same for all players, the bot's decisions should be as well.
*/

seed = 0

// Tendenices increase the chance the AI will pick a specific action
tendency_healqueen = 0 // Focus on restoring the queen's health
tendency_caution = 0 // Make extra drones, send patrols
tendency_attack = 0 // Target other player's hives
tendency_units = 0 // Scale from 0-10. If units should spread out or group up
tendency_guard = 0 // Keeping some extra drones/workers in the hive
tendency_work = 0 // Buying and sending out workers
tendency_research = 0 // Likelihood of buying upgrades

tendency_pollen = 0
tendency_nectar = 0
tendency_honey = 0

need_research = "none" // What the bot wants to upgrade next

hive = 0 // The id of its hive

pollen = 0
nectar = 0
honey = 0

focus = "none"

ease_in = 0 // Makes the bot less aggressive with patrols and escorts at the start of the game

focus_pollen = false
focus_nectar = false
focus_honey = false
focus_pollination = false
can_heal = false
can_royal = false
can_attack = false

upgrade_speed_cost = 5
upgrade_distance_cost = 3
upgrade_queen_cost = 6
upgrade_attack_cost = 10
upgrade_patrol_cost = 5
upgrade_pollenfocus_cost = 15
upgrade_nectarfocus_cost = 15
upgrade_honeyfocus_cost = 15
upgrade_pollinationfocus_cost = 15
upgrade_actheal_cost = 15
upgrade_actroyal_cost = 15
upgrade_actattack_cost = 15

upgrade_cost = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ACTIONS

var actagain = false

if honey &gt;= 5 &amp;&amp; (hive.hp/hive.max_hp)*100 &lt; tendency_healqueen*10 &amp;&amp; can_heal == true {
    honey -= 5
    hive.hp += 5
    if hive.hp &gt; hive.max_hp {hive.hp = hive.max_hp}
    actagain = true
}

if honey &gt;= 10 &amp;&amp; hive.jelly_progress &lt; 90 &amp;&amp; can_royal == true {
    honey -= 10
    hive.jelly_progress += 10
    actagain = true
}

if actagain == true {
    actagain = false
    event_user(4)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick focus

list_focus = ds_list_create()

ds_list_add(list_focus,"none")
if focus_pollen == true {
    ds_list_add(list_focus,"pollen")
    ds_list_add(list_focus,"pollen")
}
if focus_nectar == true {
    ds_list_add(list_focus,"nectar")
    ds_list_add(list_focus,"nectar")
}
if focus_honey == true {
    ds_list_add(list_focus,"honey")
    ds_list_add(list_focus,"honey")
}
if focus_pollination == true {
    ds_list_add(list_focus,"bloom")
}

ds_list_shuffle(list_focus)

focus = ds_list_find_value(list_focus,0)

ds_list_destroy(list_focus)

if focus == "none" &amp;&amp; focus_pollination == true {focus = "bloom"}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Research

// Buy the chosen upgrade if you have enough pollen

if pollen &gt;= upgrade_cost {
    pollen -= upgrade_cost
    if need_research == "speed" {
        obj_admin.bot3_upgrade_speed++
        upgrade_speed_cost += 2
    }
    if need_research == "distance" {obj_admin.bot3_upgrade_distance++}
    if need_research == "queen" {
        obj_admin.bot3_upgrade_queen++
        with obj_hive {
            if p_id == 101 {hp += 5}
        }
    }
    if need_research == "attack" {
        obj_admin.bot3_upgrade_attack++
        upgrade_attack_cost += 5
    }
    if need_research == "patrol" {obj_admin.bot3_upgrade_patrol++}
    if need_research == "pollenfocus" {
        obj_admin.bot3_upgrade_focus_pollen = true
        focus_pollen = true
    }
    if need_research == "nectarfocus" {
        obj_admin.bot3_upgrade_focus_nectar = true
        focus_nectar = true
    }
    if need_research == "honeyfocus" {
        obj_admin.bot3_upgrade_focus_honey = true
        focus_honey = true
    }
    if need_research == "pollinationfocus" {
        obj_admin.bot3_upgrade_focus_pollination = true
        focus_pollen = true
    }
    if need_research == "actheal" {
        obj_admin.bot3_upgrade_action_heal = true
        can_heal = true
    }
    if need_research == "actroyal" {
        obj_admin.bot3_upgrade_action_royal = true
        can_royal = true
    }
//    if need_research == "actattack" {
//        obj_admin.bot3_upgrade_action_attack = true
//        can_attack = true
//    }
    
    // Decide what to research next
    list_research = ds_list_create()
    
    ds_list_add(list_research,"speed")
    if obj_admin.bot3_upgrade_distance &lt; 16 {ds_list_add(list_research,"distance")}
    if obj_admin.bot3_upgrade_distance &lt; 11 {ds_list_add(list_research,"distance")}
    if obj_admin.bot3_upgrade_distance &lt; 6 {ds_list_add(list_research,"distance")}
    ds_list_add(list_research,"distance")
    ds_list_add(list_research,"queen")
    ds_list_add(list_research,"attack")
    ds_list_add(list_research,"patrol")
    if focus_pollen == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"pollenfocus")}
    if focus_nectar == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"nectarfocus")}
    if focus_pollen == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"honeyfocus")}
    if focus_pollen == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"pollinationfocus")}
    if can_heal == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"actheal")}
    if can_royal == false &amp;&amp; ease_in &lt; 6 {ds_list_add(list_research,"actroyal")}
//    if can_attack == false {ds_list_add(list_research,"actattack")}
    
    ds_list_shuffle(list_research)

    need_research = ds_list_find_value(list_research,0) // What the bot wants to upgrade next
    ds_list_destroy(list_research)
    
    if need_research == "speed" {upgrade_cost = upgrade_speed_cost}
    if need_research == "distance" {upgrade_cost = upgrade_distance_cost}
    if need_research == "queen" {upgrade_cost = upgrade_queen_cost}
    if need_research == "attack" {upgrade_cost = upgrade_attack_cost}
    if need_research == "patrol" {upgrade_cost = upgrade_patrol_cost}
    if need_research == "pollenfocus" {upgrade_cost = upgrade_pollenfocus_cost}
    if need_research == "nectarfocus" {upgrade_cost = upgrade_nectarfocus_cost}
    if need_research == "honeyfocus" {upgrade_cost = upgrade_honeyfocus_cost}
    if need_research == "pollinationfocus" {upgrade_cost = upgrade_pollinationfocus_cost}
    if need_research == "actheal" {upgrade_cost = upgrade_actheal_cost}
    if need_research == "actroyal" {upgrade_cost = upgrade_actroyal_cost}
//    if need_research == "actattack" {upgrade_cost = upgrade_actattack_cost}
}

if pollen &gt;= upgrade_cost {event_user(2)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emergency purchases

if hive.workers == 0 &amp;&amp; nectar &gt;= 2 {
    nectar -= 2
    hive.workers++
    hive.idle_workers++
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide what to do for the turn

random_set_seed(seed)

// Research first

event_user(2)

// Pick focus

event_user(3)

// Do actions

event_user(4)

// Add all spaces to list

list_flowers = ds_list_create()
list_obstacles = ds_list_create() // Rocks and stumps
list_hives = ds_list_create()

with obj_space {
    if type == "flower" &amp;&amp; point_distance(x,y,obj_bot3.hive.x,obj_bot3.hive.y) &lt;= obj_bot3.hive.reach {
        with instance_create(x,y,obj_aiorder) {
            p_id = 103
            space_owner = other.id
            ds_list_add(obj_bot3.list_flowers,id)
        }
    }
    if (type == "rock" || type == "stump") &amp;&amp; point_distance(x,y,obj_bot3.hive.x,obj_bot3.hive.y) &lt;= obj_bot3.hive.reach {
        with instance_create(x,y,obj_aiorder) {
            p_id = 103
            space_owner = other.id
            ds_list_add(obj_bot3.list_obstacles,id)
        }
    }
}

with obj_hive {
    if p_id != 103 &amp;&amp; point_distance(x,y,obj_bot3.hive.x,obj_bot3.hive.y) &lt;= obj_bot3.hive.reach {
        with instance_create(x,y,obj_aiorder) {
            p_id = 103
            space_owner = other.id
            ds_list_add(obj_bot3.list_hives,id)
        }
    }
}

ds_list_shuffle(list_flowers)
ds_list_shuffle(list_obstacles)
ds_list_shuffle(list_hives)

// Do all other actions

list_decision = ds_list_create()

var temp = tendency_healqueen+irandom(4)
repeat(temp) {ds_list_add(list_decision,"queen")}

temp = tendency_caution+irandom(4)-ease_in
if temp &lt; 0 {temp = 0}
repeat(temp) {ds_list_add(list_decision,"caution")}

temp = tendency_guard+irandom(4)-ease_in
if temp &lt; 0 {temp = 0}
repeat(temp) {ds_list_add(list_decision,"guard")}

temp = tendency_work+irandom(4)
repeat(temp) {ds_list_add(list_decision,"work")}

temp = (10-tendency_caution)+irandom(4)
repeat(temp) {ds_list_add(list_decision,"worker")}

temp = tendency_attack+irandom(4)
repeat(temp) {ds_list_add(list_decision,"attack")}

ds_list_shuffle(list_decision)

while ds_list_size(list_decision) &gt; 0 {
    temp = ds_list_find_value(list_decision,0)
    show_debug_message(ds_list_find_value(list_decision,0))
    if temp == "queen" {scr_ai_queen()}
    if temp == "caution" {scr_ai_caution()}
    if temp == "guard" {scr_ai_guard()}
    if temp == "work" {scr_ai_work()}
    if temp == "worker" {scr_ai_makeworker()}
    if temp == "attack"{scr_ai_attack()}
}

if ease_in &gt; 0 {ease_in--}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Be done

show_debug_message("BOT 3 DONE")

obj_admin.bot3_focus = focus

ds_list_destroy(list_decision)
ds_list_destroy(list_flowers)
ds_list_destroy(list_obstacles)

seed = irandom(9999999999)

obj_phasetracker.bots_ready++
obj_phasetracker.alarm[0] = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin game

seed = irandom(9999999999)

tendency_healqueen = irandom_range(1,10) // Focus on restoring the queen's health
tendency_caution = irandom_range(1,10) // Make extra drones, send patrols
tendency_attack = irandom_range(1,10) // Target other player's hives
tendency_units = irandom_range(1,10) // Scale from 1-10. If units should spread out or group up
tendency_guard = irandom_range(1,10) // Keeping some extra drones/workers in the hive
tendency_work = irandom_range(1,10) // Buying and sending out workers
tendency_research = irandom_range(1,10) // Likelihood of buying upgrades

tendency_pollen = irandom_range(1,10)
tendency_nectar = irandom_range(1,10)
tendency_honey = irandom_range(1,10)

with obj_hive {
    if p_id = 103 {other.hive = id}
}

ease_in = 10+irandom(4)

need_research = "distance" // What the bot wants to upgrade next

if need_research == "distance" {upgrade_cost = upgrade_distance_cost}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
