<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_combat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>units[0] = "none" //All the stacks of bees
units_total = 0 //How many different stacks of bees that has joined.
targets = 0 //How many stacks you attack
state = ""

for (var i = 2; i &lt; 10;i++) {
units[i] = "none"}



image_speed = 0.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    for (var i = 0; i &lt; units_total; i++) {
        if (units[i] != "none") {
            units[i].state = units[i].order_state
            units[i] = "none"
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///END THE COMBAT
if (state == "end") {
instance_destroy()

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deal the damage, and change back to next attack
for (var i = 0; i &lt; units_total; i++) {

    if (units[i] != "none") {
    
    //Check if No bees left
    if (units[i].bees &lt;= 0) {
    instance_destroy(units[i])
    units[i] = "none"}
    }
    
    //Check if a bee dies
    if (units[i] != "none") {
    if (units[i].damage &gt; units[i].hp) {
    
    units[i].damage -= units[i].hp 
    
    if units[i].escort &gt; 0 {units[i].escort--}
    else
    units[i].bees--
    
    instance_create(x,y,obj_combat_bee_fx)
    i--} //Check again to see if the stack dies or if you lose another bee
    }
    
}

state = "attack"



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ATTACK
if (state == "attack") {

var units_exists = false

//For every stack of units
for (var i = 0; i &lt; units_total;i++) {


if (units[i] != "none") {

units_exists = true

//They check all other units to check how many targets they have
for (var j = 0; j &lt; units_total; j++) {

if (units[j] != "none") {
    if (units[j].p_id != units[i].p_id) {
    targets++
    }
}

}

//They then deal Damage to all targets divided between them
for (var k = 0; k &lt; units_total; k++) {
if (units[k] != "none") {
    if (units[k].p_id != units[i].p_id) {
    units[k].damage += ceil(units[i].attack / targets)}
}

}

//If a stack doesn't have any targets = only their team has units, combat ends
if (targets == 0) {
    state = "end"
    alarm[1] = 60
}
    
targets = 0

}

}

if (!units_exists) {
    state = "end"
    alarm[1] = 60
}

if (state == "attack") {
    state = "deal_damage"
    alarm[0] = 10
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Combat things
//draw_self()

//if (position_meeting(x,y,obj_mouse)) { //Show combat if hovering over combat

var temp_spriteindex = 4

for (var i = 0; i &lt; units_total; i++) {
if (units[i] != "none") {

    //Get sprite-index
    if (units[i].type == "gatherer") {temp_spriteindex = 0}
    if (units[i].type == "patrol") {temp_spriteindex = 1}
    
    
    draw_sprite(spr_order_icon,temp_spriteindex,x+(32*i)-(16*(units_total-1)),y-32)
    draw_text(x+(32*i)-(16*(units_total-1)+4),y-32,string(units[i].bees))
    
    if (units[i].escort &gt; 0) {temp_spriteindex = 2 
    draw_sprite(spr_order_icon,temp_spriteindex,x+(32*i)-(16*(units_total-1)),y-48)
    draw_text(x+(32*i)-(16*(units_total-1)+4),y-48,string(units[i].escort))}
    
    
}
temp_spriteindex = 4
if (units[i] == "none") {draw_sprite(spr_order_icon,temp_spriteindex,x+(32*i)-(16*(units_total-1)),y-32)}

}  

//}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
