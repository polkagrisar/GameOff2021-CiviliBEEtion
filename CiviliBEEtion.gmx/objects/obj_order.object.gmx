<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
creator = "none"
user = "none"
box[0] = "none"
p_id = 0

gatherer = 0
patrol = 0
escort = 0
attack = 0
available_actions = 0

total_order = 0

spawn_x = 0  //Your Hive, where the bees will spawn and return to
spawn_y = 0

goal_x = x   //This space, where the bees will go
goal_y = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Actions

//Create all actions (except attack) on a normal space
if (creator.type == "space"){
available_actions = 3
if (box[0] == "none") {

    for (var i = 0; i &lt; available_actions; i++) {
        box[i] = instance_create(x-32+i*32, y-64,obj_orderbox) 
    
        with box[i] {
            index = i
            creator = other.id
            image_index = index
        }
    }
}
}

//Create attack action on a hive
if (creator.type == "hive"){

if (box[0] == "none") {
available_actions = 1
        box[0] = instance_create(x-32, y-64,obj_orderbox) 
    
        with box[0] {
            index = 3
            creator = other.id
            image_index = index
         }
    }
}

//Create only Patrol on an empty space
if (creator.type == "nospace"){

if (box[0] == "none") {
available_actions = 1
        box[0] = instance_create(x-32, y-64,obj_orderbox) 
    
        with box[0] {
            index = 1
            creator = other.id
            image_index = index
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>total_order = gatherer + patrol + escort + attack

//Remove Escorts if no Gatherers
if (escort &gt; 0 &amp;&amp; gatherer == 0) {
    creator.user.owner.workers += escort
    escort = 0
}

//Destroy order-boxes if space not selected
if (user.target != creator) {
    for (var i = 0; i &lt; available_actions; i++) {
        instance_destroy(box[i])
        box[i] = "none"
    }
}

//Destroy self if no orders made
if (user.target != creator &amp;&amp; total_order == 0) {
    creator.order = "none"
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Bee
if (keyboard_check_pressed(vk_control)) {

//Create gatherer
if (gatherer &gt; 0) {
with instance_create(spawn_x, spawn_y,obj_bee) {
type = "gatherer"
p_id = other.p_id
bees = other.gatherer
escort = other.escort
home_x = other.spawn_x
home_y = other.spawn_y
go_x = other.creator.x
go_y = other.creator.y
move_speed = 5
    }
}

//Create patroller
if (patrol &gt; 0) {
with instance_create(spawn_x, spawn_y,obj_bee) {
type = "patrol"
p_id = other.p_id
bees = other.patrol
escort = other.escort
home_x = other.spawn_x
home_y = other.spawn_y
go_x = other.creator.x
go_y = other.creator.y
move_speed = 8
    }
}

for (var i = 0; i &lt; available_actions; i++) {
        instance_destroy(box[i])
        box[i] = "none"
    }
    
    creator.order = "none"
    instance_destroy()


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
//draw_text(x-64,y+32,user.target)


draw_text(x-32,y,"G:" + string(gatherer))
draw_text(x,y," P:" + string(patrol))
draw_text(x-32,y+16,"E:" + string(escort))
draw_text(x,y+16," A:" + string(attack))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///User Feedback
if (gatherer &gt; 0 || patrol &gt; 0 || attack &gt; 0)
draw_line_colour(spawn_x,spawn_y,goal_x,goal_y,c_red,c_red)

var g_exist = false
var p_exist = false
var e_exist = false
var a_exist = false
var all_orders = 0


if (gatherer &gt; 0) {g_exist = true
all_orders++}
if (patrol &gt; 0) {p_exist = true
all_orders++}
if (escort &gt; 0) {e_exist = true
all_orders++}
if (attack &gt; 0) {a_exist = true
all_orders++}

if (all_orders == 1) {
if (g_exist) {
draw_sprite(spr_order_icon,0,x,y)
draw_text(x,y-32,gatherer)}
if (p_exist) {draw_sprite(spr_order_icon,1,x,y)
draw_text(x,y-32,patrol)}
if (a_exist) {draw_sprite(spr_order_icon,3,x,y)
draw_text(x,y-32,attack)}
}

if (all_orders == 2) {
if (g_exist &amp;&amp; p_exist) {
draw_sprite(spr_order_icon,0,x-16,y)
draw_text(x-16,y-32,gatherer)
draw_sprite(spr_order_icon,1,x+16,y)
draw_text(x+16,y-32,patrol)}
if (g_exist &amp;&amp; e_exist) {
draw_sprite(spr_order_icon,0,x-16,y)
draw_text(x-16,y-32,gatherer)
draw_sprite(spr_order_icon,2,x+16,y)
draw_text(x+16,y-32,escort)}

}

if (all_orders == 3) {
draw_sprite(spr_order_icon,0,x-32,y)
draw_text(x-32,y-32,gatherer)
draw_sprite(spr_order_icon,1,x,y)
draw_text(x,y-32,patrol)
draw_sprite(spr_order_icon,2,x+32,y)
draw_text(x+32,y-32,escort)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
