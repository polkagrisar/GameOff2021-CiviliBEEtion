<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mask_space_setup</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>random_set_seed(obj_admin.seed)

x = round(room_width/2)
y = round(room_height/2)

player_amount = 1
if obj_admin.player2 == true {player_amount++}
if obj_admin.player3 == true {player_amount++}
if obj_admin.player4 == true {player_amount++}
if obj_admin.player5 == true {player_amount++}
if obj_admin.player6 == true {player_amount++}
if obj_admin.bot1 == true {player_amount++}
if obj_admin.bot2 == true {player_amount++}
if obj_admin.bot3 == true {player_amount++}
if obj_admin.bot4 == true {player_amount++}
if obj_admin.bot5 == true {player_amount++}
if obj_admin.bot6 == true {player_amount++}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Place hives

var placement_angle = 360/(player_amount)
var radius = (player_amount)*8
var offset = irandom(360)

for (i = 0; i &lt; (player_amount); i++) {
    instance_create(x+lengthdir_x(200+radius,placement_angle*i+offset), y+lengthdir_y(200+radius,placement_angle*i+offset), obj_hive)
}

// Add players and bots to lists

list_hive_players = ds_list_create()
list_hive = ds_list_create()

with obj_hive {ds_list_add(other.list_hive,id)}

if obj_admin.player1 == true {ds_list_add(list_hive_players,1)}
if obj_admin.player2 == true {ds_list_add(list_hive_players,2)}
if obj_admin.player3 == true {ds_list_add(list_hive_players,3)}
if obj_admin.player4 == true {ds_list_add(list_hive_players,4)}
if obj_admin.player5 == true {ds_list_add(list_hive_players,5)}
if obj_admin.player6 == true {ds_list_add(list_hive_players,6)}

if obj_admin.bot1 == true {ds_list_add(list_hive_players,101)}
if obj_admin.bot2 == true {ds_list_add(list_hive_players,102)}
if obj_admin.bot3 == true {ds_list_add(list_hive_players,103)}
if obj_admin.bot4 == true {ds_list_add(list_hive_players,104)}
if obj_admin.bot5 == true {ds_list_add(list_hive_players,105)}
if obj_admin.bot6 == true {ds_list_add(list_hive_players,106)}

ds_list_shuffle(list_hive_players)
ds_list_shuffle(list_hive)

// Scramble which player gets which hive

while !ds_list_empty(list_hive) {
    temp_hive = ds_list_find_value(list_hive,0)
    temp_player = ds_list_find_value(list_hive_players,0)
    with temp_hive {p_id = other.temp_player}
    if temp_hive.p_id == obj_admin.player {
        with instance_create(mouse_x,mouse_y,obj_mouse) {
            p_id = other.temp_hive.p_id
            home_x = other.temp_hive.x
            home_y = other.temp_hive.y
            owner = other.temp_hive
        }
        with instance_create(0,0,obj_radius) {
            p_id = other.temp_hive.p_id
            owner = other.temp_hive
        }
    }
    ds_list_delete(list_hive_players,0)
    ds_list_delete(list_hive,0)
}

ds_list_destroy(list_hive_players)
ds_list_destroy(list_hive)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create starting flowers

list_hives = ds_list_create()

with obj_hive {ds_list_add(other.list_hives,id)}

for (i = 0; i &lt; ds_list_size(list_hives)+1; i++) {
    target = ds_list_find_value(list_hives,0)
    dir = random(360)
    dir_count = 0
    x = target.x+lengthdir_x(70,dir)
    y = target.y+lengthdir_y(70,dir)
    while place_meeting(target.x+lengthdir_x(70,dir),target.y+lengthdir_y(70,dir),obj_hive) || place_meeting(target.x+lengthdir_x(70,dir),target.y+lengthdir_y(70,dir),obj_space) &amp;&amp; dir_count &lt; 360 &amp;&amp; point_distance(x,y,room_width/2,room_height/2) &lt; 368 {
        dir++
        dir_count++
    }
    if dir_count &lt; 360 {
        with instance_create(x,y,obj_space) {
        type = "flower"
        }
    }
    ds_list_delete(list_hives,0)
}

ds_list_destroy(list_hives)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_terraingenerator</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Place random objects

// Create super flower at map center
with instance_create(room_width/2,room_height/2,obj_space) {
    type = "flower"
    pollen = 5
    nectar = 5
    honey = 5
}

// Spread stuff, circle 1

list_stuff = ds_list_create()

repeat (3) {ds_list_add(list_stuff,"flower")}
repeat (2) {ds_list_add(list_stuff,"rock")}
repeat (1) {ds_list_add(list_stuff,"stump")}
repeat (2) {ds_list_add(list_stuff,"bud")}
repeat (1) {ds_list_add(list_stuff,"blank")}

ds_list_shuffle(list_stuff)

var placement_angle = 360/5
var offset = irandom(360)

for (i = 0; i &lt; 5; i++) {
    offset_x = random_range(-16,16)
    offset_y = random_range(-16,16)
    x = room_width/2+lengthdir_x(92+offset_x,placement_angle*i+offset)
    y = room_height/2+lengthdir_y(92+offset_y,placement_angle*i+offset)
    focus = choose("pollen","nectar","honey","balanced")
    if !place_meeting(x,y,obj_hive) &amp;&amp; !place_meeting(x,y,obj_space) &amp;&amp; ds_list_find_value(other.list_stuff,0) != "blank" {
        with instance_create(x,y,obj_space) {
            type = ds_list_find_value(other.list_stuff,0)
            if other.focus != "pollen" {pollen = 0.5}
            if other.focus != "nectar" {nectar = 0.5}
            if other.focus != "honey" {honey = 0.5}
            if other.focus == "balanced" {
                pollen = 0.75
                nectar = 0.75
                honey = 0.75
            }
        }
    }
    ds_list_delete(list_stuff,0)
}

ds_list_clear(list_stuff)

// Circle 2

repeat (6) {ds_list_add(list_stuff,"flower")}
repeat (4) {ds_list_add(list_stuff,"rock")}
repeat (4) {ds_list_add(list_stuff,"stump")}
repeat (8) {ds_list_add(list_stuff,"bud")}
repeat (3) {ds_list_add(list_stuff,"blank")}

ds_list_shuffle(list_stuff)

var placement_angle = 360/10
var offset = irandom(360)

for (i = 0; i &lt; 10; i++) {
    offset_x = random_range(-16,16)
    offset_y = random_range(-16,16)
    x = room_width/2+lengthdir_x(184+offset_x,placement_angle*i+offset)
    y = room_height/2+lengthdir_y(184+offset_y,placement_angle*i+offset)
    focus = choose("pollen","nectar","honey","balanced")
    if !place_meeting(x,y,obj_hive) &amp;&amp; !place_meeting(x,y,obj_space) &amp;&amp; ds_list_find_value(other.list_stuff,0) != "blank" {
        with instance_create(x,y,obj_space) {
            type = ds_list_find_value(other.list_stuff,0)
            if other.focus != "pollen" {pollen = 0.5}
            if other.focus != "nectar" {nectar = 0.5}
            if other.focus != "honey" {honey = 0.5}
            if other.focus == "balanced" {
                pollen = 0.75
                nectar = 0.75
                honey = 0.75
            }
        }
    }
    ds_list_delete(list_stuff,0)
}

ds_list_clear(list_stuff)

// Circle 3

repeat (6) {ds_list_add(list_stuff,"flower")}
repeat (8) {ds_list_add(list_stuff,"rock")}
repeat (4) {ds_list_add(list_stuff,"stump")}
repeat (10) {ds_list_add(list_stuff,"bud")}
repeat (6) {ds_list_add(list_stuff,"blank")}

ds_list_shuffle(list_stuff)

var placement_angle = 360/18
var offset = irandom(360)

for (i = 0; i &lt; 18; i++) {
    offset_x = random_range(-16,16)
    offset_y = random_range(-16,16)
    x = room_width/2+lengthdir_x(276+offset_x,placement_angle*i+offset)
    y = room_height/2+lengthdir_y(276+offset_y,placement_angle*i+offset)
    focus = choose("pollen","nectar","honey","balanced")
    if !place_meeting(x,y,obj_hive) &amp;&amp; !place_meeting(x,y,obj_space &amp;&amp; ds_list_find_value(other.list_stuff,0) != "blank") {
        with instance_create(x,y,obj_space) {
            type = ds_list_find_value(other.list_stuff,0)
            if other.focus != "pollen" {pollen = 0.5}
            if other.focus != "nectar" {nectar = 0.5}
            if other.focus != "honey" {honey = 0.5}
            if other.focus == "balanced" {
                pollen = 0.75
                nectar = 0.75
                honey = 0.75
            }
        }
    }
    ds_list_delete(list_stuff,0)
}

ds_list_clear(list_stuff)

// Last circle

repeat (7) {ds_list_add(list_stuff,"flower")}
repeat (10) {ds_list_add(list_stuff,"rock")}
repeat (5) {ds_list_add(list_stuff,"stump")}
repeat (10) {ds_list_add(list_stuff,"blank")}

ds_list_shuffle(list_stuff)

var placement_angle = 360/20
var offset = irandom(360)

for (i = 0; i &lt; 20; i++) {
    offset_x = random_range(-16,16)
    offset_y = random_range(-16,16)
    x = room_width/2+lengthdir_x(368+offset_x,placement_angle*i+offset)
    y = room_height/2+lengthdir_y(368+offset_y,placement_angle*i+offset)
    focus = choose("pollen","nectar","honey","balanced")
    if !place_meeting(x,y,obj_hive) &amp;&amp; !place_meeting(x,y,obj_space &amp;&amp; ds_list_find_value(other.list_stuff,0) != "blank") &amp;&amp; point_distance(x,y,room_width/2,room_height/2) &lt; 368 {
        with instance_create(x,y,obj_space) {
            type = ds_list_find_value(other.list_stuff,0)
            if other.focus != "pollen" {pollen = 0.5}
            if other.focus != "nectar" {nectar = 0.5}
            if other.focus != "honey" {honey = 0.5}
            if other.focus == "balanced" {
                pollen = 0.75
                nectar = 0.75
                honey = 0.75
            }
        }
    }
    ds_list_delete(list_stuff,0)
}

ds_list_destroy(list_stuff)

/*

// Spread other flowers

placed = 0
focus = choose("pollen","nectar","honey","balanced")

flowers = 0
rocks = 0
buds = 0
stumps = 0

while placed &lt; 11 {
    x = room_width/2+lengthdir_x(random(364),random(360))
    y = room_height/2+lengthdir_y(random(364),random(360))
    if !place_meeting(x,y,obj_hive) &amp;&amp; !place_meeting(x,y,obj_space) {
        with instance_create(x,y,obj_space) {
            type = "flower"
            focus = choose("pollen","nectar","honey")
            if other.focus != "pollen" {pollen = 0.5}
            if other.focus != "nectar" {nectar = 0.5}
            if other.focus != "honey" {honey = 0.5}
            if other.focus == "balanced" {
                pollen = 0.75
                nectar = 0.75
                honey = 0.75
            }
        }
        placed++
    }
}

// Spread buds


// Spread rocks

// Spread stumps
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set bot seeds

with obj_bot1 {event_user(0)}
//with obj_bot2 {event_user(0)}
//with obj_bot3 {event_user(0)}
//with obj_bot4 {event_user(0)}
//with obj_bot5 {event_user(0)}
//with obj_bot6 {event_user(0)}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finalise

obj_space.mask_index = spr_mask_space

obj_phasetracker.phase = "planning"

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
